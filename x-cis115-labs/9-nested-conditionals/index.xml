




	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nested Conditionals on Intro CS Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/index.html</link>
    <description>Recent content in Nested Conditionals on Intro CS Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2021 00:23:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear Conditionals</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/01-linear/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/01-linear/index.html</guid>
      <description>YouTube Video Resources Slides To explore the various ways we can use conditional statements in code, let&amp;rsquo;s start by examining the same problem using three different techniques. We&amp;rsquo;ll use the classic Rock Paper Scissors game. In this game, two players simultaneously make one of three hand gestures, and then determine a winner based on the following diagram:
1
For example, if the first player displays a balled fist, representing rock and the second player displays a flat hand, representing paper, then the second player wins because &amp;ldquo;paper covers rock&amp;rdquo; according to the rules.</description>
    </item>
    <item>
      <title>Chaining Conditionals</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/02-chaining/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/02-chaining/index.html</guid>
      <description>YouTube Video Resources Slides In the previous example, we saw a set of linear if statements to represent a Rock Paper Scissors game. As we discussed on that page, the Boolean expressions are meant to be mutually exclusive, meaning that only one of the Boolean expressions will be true no matter what input the user provides.
When we have mutually exclusive Boolean expressions like this, we can instead use if-else statements to make the mutually exclusive structure of the program clearer to the user.</description>
    </item>
    <item>
      <title>Nesting Conditionals</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/03-nesting/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/03-nesting/index.html</guid>
      <description>YouTube Video Resources Slides We&amp;rsquo;ve already seen how we can chain conditional statements by placing a new conditional statement inside of the False branch of another conditional statement. If we think about that, however, that implies that we probably should be able to place conditional statements inside of the True branch as well, or really anywhere. As it turns out, that&amp;rsquo;s exactly correct. We call this nesting, and it is really quite similar to what we&amp;rsquo;ve already seen in this lab.</description>
    </item>
    <item>
      <title>Blocks and Scope</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/04-blocks-scope/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/04-blocks-scope/index.html</guid>
      <description>YouTube Video Resources Slides Now that we&amp;rsquo;ve seen how we can chain and nest multiple conditional statements in our code, we need to address a very important concept: variable scope.
In programming, variable scope refers to the locations in code where variables can be accessed. Contrary to what we may think based on our experience, when we declare a variable in our code, it may not always be available everywhere.</description>
    </item>
    <item>
      <title>Worked Example</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/05-worked-example/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/05-worked-example/index.html</guid>
      <description>YouTube Video Resources Slides Let&amp;rsquo;s go through another worked example to see how we can translate a problem statement into a working program. We&amp;rsquo;ll also take a look at how we can test the program to verify that it is working as intended.
Problem Statement Here&amp;rsquo;s a short and simple game that can be played by two players:
Three players each guess a positive integer greater than $0$, and then share them simultaneously.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/06-summary/index.html</link>
      <pubDate>Tue, 16 Mar 2021 00:00:01 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cs-zero/x-cis115-labs/9-nested-conditionals/06-summary/index.html</guid>
      <description>In this lab, we introduced several major important topics in Python. Let&amp;rsquo;s quickly review them.
Mutually Exclusive Conditional statements are mutually exclusive when only one of the many branches will be executed for any possible input.
Chained Conditionals if condition_1: print(&amp;#34;1&amp;#34;) else if condition_2: print(&amp;#34;2&amp;#34;) else: if condition_3: print(&amp;#34;3&amp;#34;) else: print(&amp;#34;4&amp;#34;)is equivalent to:
if condition_1: print(&amp;#34;1&amp;#34;) elif condition_2: print(&amp;#34;2&amp;#34;) elif condition_3: print(&amp;#34;3&amp;#34;) else: print(&amp;#34;4&amp;#34;)Nested Conditionals if condition_1: if condition_2: print(&amp;#34;1 and 2&amp;#34;) elif condition_3: print(&amp;#34;1 and 3&amp;#34;) else: print(&amp;#34;1 and not 2 or 3&amp;#34;) elif condition_4: if condition_2: print(&amp;#34;4 and 2&amp;#34;) elif condition_3: print(&amp;#34;4 and 3&amp;#34;) else: print(&amp;#34;4 and not 2 or 3&amp;#34;) else: print(&amp;#34;neither 1 nor 4&amp;#34;)Variable Scope Variable scope refers to what parts of the code a particular variable is accessible in.</description>
    </item>
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Complexity (Part 2) :: Intro CS Textbook</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/09-complexity-2/</link><description>YouTube Video Resources Slides Video Script So now that we’ve learned about merge sort and quicksort, let’s take a look at the complexity of one of these algorithms. Just to understand how that works. For this example, we’re going to look at the complexity of merge sort. Let’s consider the example where we’re doing merge sort on eight numbers. So here we have the numbers 1,2,3,4,5,6,7,8. So the first step of Merge Sort would have us divide those in half into groups, 1,2,3,4, and group 5,6,7,8, then we would divide each of those in half again, ending up with four groups 1-2,3-4,5-6, and 7-8t.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/09-complexity-2/index.xml" rel="self" type="application/rss+xml"/></channel></rss>
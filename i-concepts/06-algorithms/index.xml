<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms :: Intro CS Textbook</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2024 12:25:42 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/01-introduction/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/01-introduction/</guid><description>YouTube Video Resources Slides Video Script In this module, we’re going to learn about algorithms. But before we can discuss algorithms, let’s take a look at something that you might be very familiar with and see how it actually relates to the idea of an algorithm. For example, we can ask ourselves, how do you shuffle cards? It’s something that is really hard to describe. But once you see it, and you can observe other people doing it, it’s pretty easy to understand what’s going on.</description></item><item><title>The Weird Truth About Arabic Numerals (SciShow)</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/02-arabic-numerals/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/02-arabic-numerals/</guid><description> YouTube Video</description></item><item><title>What is an Algorithm?</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/03-what-is-an-algorithm/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/03-what-is-an-algorithm/</guid><description>YouTube Video Resources Slides Video Script So what is an algorithm in computer science? A good definition for an algorithm is a finite list of specific instructions for carrying out a procedure or solving a problem. If you think about it, every computer program we write consists of many different algorithms. Because as we’ve learned, writing a computer program is exactly that. It’s giving the computer a list of very specific instructions that we’d like it to carry out so that it can perform a task or solve a problem for us.</description></item><item><title>Insertion Sort</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/04-insertion-sort/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/04-insertion-sort/</guid><description>YouTube Video Resources Slides Video Script In these next couple of videos, we’re going to introduce the concept of sorting algorithms. Sorting algorithms are used when we want to arrange sets of data in order either from smallest to largest or largest to smallest in our computer programs. As it turns out, there are many different ways that we can sort our data using different algorithms. And each of those algorithms have unique characteristics that make them suitable for certain types of data in certain situations.</description></item><item><title>Bubble Sort</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/05-bubble-sort/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/05-bubble-sort/</guid><description>YouTube Video Resources Slides Video Script The next algorithm we’re going to look at is bubble sort. Bubble sort might seem similar to Insertion Sort, but it’s actually quite the different algorithm. So in bubble sort, what we will do is we will start by comparing two side by side elements in the list of data. And then if they’re out of order, we will swap them. You can see in the animation above me how those two red boxes move to compare two side by side items.</description></item><item><title>Complexity (Part 1)</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/06-complexity/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/06-complexity/</guid><description>YouTube Video Resources Slides Video Script So far, we’ve looked at two different algorithms for sorting decks of cards, Insertion Sort, and bubblesort. So let’s take a minute and try and decide which of those algorithms do you think is faster for a computer? a better question might be, which of those two algorithms was faster for you as it person to perform? Those are really tough questions to answer, aren’t they?</description></item><item><title>Merge Sort</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/07-merge-sort/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/07-merge-sort/</guid><description>YouTube Video Resources Slides Video Script The next algorithm we’re going to look at is merge sort. Merge Sort is a very unique algorithm because it’s an example of the divide and conquer paradigm of creating algorithms. In fact, Merge Sort was actually written way back in the 1950s and 60s to allow us the ability to sort data that didn’t even fit on a single data storage media at the time.</description></item><item><title>Quick Sort</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/08-quicksort/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/08-quicksort/</guid><description>YouTube Video Resources Slides Video Script The last sorting algorithm we’re going to look at is quicksort. Quicksort is the newest of these algorithms being first published in 1961. Quicksort is a little bit different than the other sorting algorithms, because it requires us to choose a pivot element from the list and then sort based off of that pivot elements, it’s really kind of hard to understand conceptually without seeing it in action.</description></item><item><title>Complexity (Part 2)</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/09-complexity-2/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/09-complexity-2/</guid><description>YouTube Video Resources Slides Video Script So now that we’ve learned about merge sort and quicksort, let’s take a look at the complexity of one of these algorithms. Just to understand how that works. For this example, we’re going to look at the complexity of merge sort. Let’s consider the example where we’re doing merge sort on eight numbers. So here we have the numbers 1,2,3,4,5,6,7,8. So the first step of Merge Sort would have us divide those in half into groups, 1,2,3,4, and group 5,6,7,8, then we would divide each of those in half again, ending up with four groups 1-2,3-4,5-6, and 7-8t.</description></item><item><title>Heuristics</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/10-heuristics/</link><pubDate>Mon, 10 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/10-heuristics/</guid><description>YouTube Video Resources Slides Video Script So far in this module, we’ve studied algorithms, and remember that an algorithm is a specific set of steps that we can use to solve a problem. However, what if we’re faced with a problem that we can’t solve? Either because it’s impossible, or because we have so much data that we can’t possibly find the one right answer using an algorithm. In that case, we would use something we call a heuristic.</description></item><item><title>Pattern on the Stone Reading</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/11-pots-reading/</link><pubDate>Wed, 27 May 2020 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/06-algorithms/11-pots-reading/</guid><description>Read Pattern on the Stone, Chapter 5.</description></item></channel></rss>
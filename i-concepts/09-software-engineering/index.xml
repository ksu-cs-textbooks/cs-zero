<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering :: Intro CS Textbook</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2024 12:25:42 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/01-introduction/</link><pubDate>Fri, 28 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/01-introduction/</guid><description>YouTube Video Resources Slides Video Script Welcome back everyone. In this video we’re gonna be talking about software engineering. Now you should remember this particular machine the ENIAC, which was the first electronic computer in the United States. Programming the ENIAC was a really slow and laborious process though. To load a program, ENIAC’s programmers Pictured here is Gloria Ruth Gordon, and, well, later Bolotsky, and Esther Gordon would physically rewire the hardware and a new configuration corresponding to the calculations indicated by the programmers.</description></item><item><title>Margaret Hamilton - 2017 CHM Fellow</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/02-margaret-hamilton/</link><pubDate>Wed, 27 May 2020 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/02-margaret-hamilton/</guid><description> YouTube Video</description></item><item><title>Software Development Life Cycle Part 1</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/03-sdlc-1/</link><pubDate>Fri, 28 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/03-sdlc-1/</guid><description>YouTube Video Resources Slides Video Script Now that we’ve talked a bit a little bit about the history of software development and software engineering and how it’s evolved over the years, what are some of the key activities that we actually engage with in this process. Now, you’ve already used and worked with a lot of these already, even if you haven’t really made the connection to them yet. Software Engineering overall will come with quite a few different processes along with it.</description></item><item><title>Software Development Life Cycle Part 2</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/04-sdlc-2/</link><pubDate>Fri, 28 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/04-sdlc-2/</guid><description>YouTube Video Resources Slides Video Script Let’s take a look into a few other different methodologies in software development. So this one is in complete contrast to the waterfall model of software development and pretty much all other development methodologies. Because this methodology, there really isn’t anything to it. It’s generally known as cowboy coding or code and fix. Now, this in many ways, is the anti software engineering approach, where planning, testing documentation at pretty much everything, all of that is ignored, or immediately writing code.</description></item><item><title>Software Development Life Cycle Part 3</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/05-sdlc-3/</link><pubDate>Fri, 28 Aug 2020 16:27:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/05-sdlc-3/</guid><description>YouTube Video Resources Slides Video Script The iterative development process, or the iterative development model breaks down software development into much smaller segments. This allows for a lot more change and variation to the development cycle. So the iterative development process works by working through many waterfalls. And so if you look at each one of these chunks here, each one of these stages, they’re pretty much the waterfall process.</description></item><item><title>Software Engineering (Crash Course)</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/06-se-crash-course/</link><pubDate>Wed, 27 May 2020 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/06-se-crash-course/</guid><description> YouTube Video</description></item><item><title>Pattern on the Stone Reading</title><link>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/07-pots-reading/</link><pubDate>Wed, 27 May 2020 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cs-zero/i-concepts/09-software-engineering/07-pots-reading/</guid><description>Read Pattern on the Stone, Chapter 8.</description></item></channel></rss>